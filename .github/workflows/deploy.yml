name: Build and Deploy to EC2

on:
  push:
    branches:
      - prod
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: env

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: ichbooking-web
      IMAGE_TAG: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        run: |
          docker build -f docker/DockerfileProd -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,ECR_REGISTRY
          script: |
            set -e
            
            # Получаем пароль ECR через контейнер aws-cli (без установки awscli и без sudo)
            ECR_PASSWORD=$(docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_REGION amazon/aws-cli ecr get-login-password --region "${AWS_REGION}")
            
            # Логин в ECR
            echo "$ECR_PASSWORD" | docker login --username AWS --password-stdin "${ECR_REGISTRY}"
            
            # Обновляем код на сервере
            cd ~/ICHBooking || (git clone https://github.com/meni0419/ICHBooking.git ~/ICHBooking && cd ~/ICHBooking)
            git fetch --all
            git reset --hard origin/${{ github.ref_name }}
            
            # Сформируем .env из Secrets/Vars окружения GitHub
            cat > .env <<'EOF'
            DJANGO_DEBUG=${{ vars.DJANGO_DEBUG }}
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DJANGO_ALLOWED_HOSTS=${{ vars.DJANGO_ALLOWED_HOSTS }}
            DJANGO_CSRF_TRUSTED_ORIGINS=${{ vars.DJANGO_CSRF_TRUSTED_ORIGINS }}
            DJANGO_SECURE_COOKIES=${{ vars.DJANGO_SECURE_COOKIES }}
            DOMAIN=${{ vars.DOMAIN }}
            
            WEB_PORT=${{ vars.WEB_PORT }}
            
            DB_ENGINE=${{ vars.DB_ENGINE }}
            DB_NAME=${{ vars.DB_NAME }}
            DB_TEST_NAME=${{ vars.DB_TEST_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            DB_HOST=${{ vars.DB_HOST }}
            DB_PORT=${{ vars.DB_PORT }}
            
            JWT_ACCESS_COOKIE_NAME=${{ vars.JWT_ACCESS_COOKIE_NAME }}
            JWT_REFRESH_COOKIE_NAME=${{ vars.JWT_REFRESH_COOKIE_NAME }}
            JWT_COOKIE_SAMESITE=${{ vars.JWT_COOKIE_SAMESITE }}
            JWT_COOKIE_SECURE=${{ vars.JWT_COOKIE_SECURE }}
            JWT_ACCESS_LIFETIME_MIN=${{ vars.JWT_ACCESS_LIFETIME_MIN }}
            JWT_REFRESH_LIFETIME_DAYS=${{ vars.JWT_REFRESH_LIFETIME_DAYS }}
            
            RUN_MIGRATIONS=${{ vars.RUN_MIGRATIONS }}
            RUN_COLLECTSTATIC=${{ vars.RUN_COLLECTSTATIC }}
            EOF
            
            # Подтягиваем образ и перезапускаем
            docker compose -f docker-compose-prod.yml --env-file .env pull
            docker compose -f docker-compose-prod.yml --env-file .env up -d
            docker image prune -f --filter "until=24h"
            docker builder prune -f --filter "until=24h"